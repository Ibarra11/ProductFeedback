// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Category {
  FEATURE
  UX
  UI
  ENHANCEMENT
  BUG
}

enum Status {
  LIVE
  IN_PROGRESS
  PLANNED
  SUGGESTION
}

// user: {
//   image: string;
//   name: string;
//   username: string;
// };

//  {
//       "id": 1,
//       "title": "Add tags for solutions",
//       "category": "enhancement",
//       "upvotes": 112,
//       "status": "suggestion",
//       "description": "Easier to search for solutions based on a specific stack.",
//       "comments": [
//         {
//           "id": 1,
//           "content": "Awesome idea! Trying to find framework-specific projects within the hubs can be tedious",
//           "user": {
//             "image": "/user-images/image-suzanne.jpg",
//             "name": "Suzanne Chang",
//             "username": "upbeat1811"
//           }
//         },
//         {
//           "id": 2,
//           "content": "Please use fun, color-coded labels to easily identify them at a glance",
//           "user": {
//             "image": "/user-images/image-thomas.jpg",
//             "name": "Thomas Hood",
//             "username": "brawnybrave"
//           }
//         }
//       ]
//     },

model User {
  user_id  Int       @id @default(autoincrement())
  image    String
  name     String
  username String    @unique
  posts    Post[]
  comments Comment[]
}

model Post {
  post_id    Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  title      String
  content    String
  upvotes    Int       @default(0)
  category   Category
  status     Status    @default(SUGGESTION)
  comments   Comment[]
  User       User      @relation(fields: [user_fk_id], references: [user_id])
  user_fk_id Int
}

model Comment {
  comment_id Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  content    String
  Post       Post     @relation(fields: [post_fk_id], references: [post_id])
  post_fk_id Int
  User       User     @relation(fields: [user_fk_id], references: [user_id])
  user_fk_id Int
}

// model CommentReply {
//   id         Int      @id @default(autoincrement())
//   createdAt  DateTime @default(now())
//   content    String
//   replyingTo Comment  @relation(fields: [commentId], references: [id])
//   commentId  Int
//   User       User     @relation(fields: [userId], references: [id])
//   userId     Int
//   level      Int
// }
