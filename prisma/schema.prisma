// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Category {
  FEATURE
  UX
  UI
  ENHANCEMENT
  BUG
}

enum Status {
  LIVE
  IN_PROGRESS
  PLANNED
  SUGGESTION
}

model User {
  user_id  Int       @id @default(autoincrement())
  image    String
  name     String
  username String    @unique
  posts    Post[]
  comments Comment[]
  Upvotes  Upvotes[]
}

model Post {
  post_id    Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  title      String
  content    String
  category   Category
  status     Status    @default(SUGGESTION)
  comments   Comment[]
  User       User      @relation(fields: [user_fk_id], references: [user_id])
  user_fk_id Int
  upvotes    Upvotes[]
}

model Upvotes {
  upvote_id  Int     @id @default(autoincrement())
  state      Boolean
  post_fk_id Int
  Post       Post    @relation(fields: [post_fk_id], references: [post_id], onDelete: Cascade)
  user_fk_id Int
  User       User    @relation(fields: [user_fk_id], references: [user_id], onDelete: Cascade)
}

model Comment {
  comment_id Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  content    String
  Post       Post     @relation(fields: [post_fk_id], references: [post_id], onDelete: Cascade)
  post_fk_id Int
  User       User     @relation(fields: [user_fk_id], references: [user_id])
  user_fk_id Int
}

// model CommentReply {
//   id         Int      @id @default(autoincrement())
//   createdAt  DateTime @default(now())
//   content    String
//   replyingTo Comment  @relation(fields: [commentId], references: [id])
//   commentId  Int
//   User       User     @relation(fields: [userId], references: [id])
//   userId     Int
//   level      Int
// }
