generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// I added the initial values, so I know when the user creates a profile for the first time, so I could send them to setting page to setup their profile.

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// I add a newUser value, so I can redirect new users to setup their profile
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
  Upvotes       Upvotes[]
  newUser       Boolean   @default(true)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Category {
  Feature
  UX
  UI
  Enhancement
  Bug
}

enum Status {
  Live
  In_Progress
  Planned
  Suggestion
}

model Post {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  title     String
  content   String
  category  Category
  status    Status    @default(Suggestion)
  comments  Comment[]
  User      User      @relation(fields: [user_id], references: [id])
  user_id   String
  upvotes   Upvotes[]
}

model Upvotes {
  id      Int    @id @default(autoincrement())
  post_id Int
  Post    Post   @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user_id String
  User    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([post_id, user_id])
}

model Comment {
  comment_id      Int       @id @default(autoincrement())
  replyingTo      String?
  createdAt       DateTime  @default(now())
  content         String
  Post            Post      @relation(fields: [post_id], references: [id], onDelete: Cascade)
  post_id         Int
  User            User      @relation(fields: [user_id], references: [id])
  user_id         String
  replies         Comment[] @relation("replies")
  repliesRelation Comment[] @relation("replies")
}
